// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ContributionDay defines model for ContributionDay.
type ContributionDay struct {
	Count int                `json:"count"`
	Date  openapi_types.Date `json:"date"`
}

// ContributionDaysResponse defines model for ContributionDaysResponse.
type ContributionDaysResponse struct {
	Days     []ContributionDay `json:"days"`
	Total    int               `json:"total"`
	Username string            `json:"username"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// LanguageStats defines model for LanguageStats.
type LanguageStats struct {
	// Color GitHub language color in hex format
	Color    string `json:"color"`
	Language string `json:"language"`
	Lines    int    `json:"lines"`
}

// LanguageStatsResponse defines model for LanguageStatsResponse.
type LanguageStatsResponse struct {
	Repositories   []RepositoryLanguageStats `json:"repositories"`
	TotalLanguages []LanguageStats           `json:"total_languages"`
	Username       string                    `json:"username"`
}

// RepositoryLanguageStats defines model for RepositoryLanguageStats.
type RepositoryLanguageStats struct {
	Languages  []LanguageStats `json:"languages"`
	Repository string          `json:"repository"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	Message string `json:"message"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Name      *string `json:"name,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// GetContributionDaysParams defines parameters for GetContributionDays.
type GetContributionDaysParams struct {
	Username    string `form:"username" json:"username"`
	AccessToken string `form:"access_token" json:"access_token"`
}

// GetLanguageStatsParams defines parameters for GetLanguageStats.
type GetLanguageStatsParams struct {
	Username    string `form:"username" json:"username"`
	AccessToken string `form:"access_token" json:"access_token"`
}

// GetUserInfoParams defines parameters for GetUserInfo.
type GetUserInfoParams struct {
	AccessToken string `form:"access_token" json:"access_token"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Contribution Days
	// (GET /contribution-days)
	GetContributionDays(w http.ResponseWriter, r *http.Request, params GetContributionDaysParams)
	// Get Language Statistics
	// (GET /language-stats)
	GetLanguageStats(w http.ResponseWriter, r *http.Request, params GetLanguageStatsParams)
	// Check API Status
	// (GET /status)
	GetApiStatus(w http.ResponseWriter, r *http.Request)
	// Get User Information
	// (GET /user)
	GetUserInfo(w http.ResponseWriter, r *http.Request, params GetUserInfoParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get Contribution Days
// (GET /contribution-days)
func (_ Unimplemented) GetContributionDays(w http.ResponseWriter, r *http.Request, params GetContributionDaysParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Language Statistics
// (GET /language-stats)
func (_ Unimplemented) GetLanguageStats(w http.ResponseWriter, r *http.Request, params GetLanguageStatsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check API Status
// (GET /status)
func (_ Unimplemented) GetApiStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get User Information
// (GET /user)
func (_ Unimplemented) GetUserInfo(w http.ResponseWriter, r *http.Request, params GetUserInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetContributionDays operation middleware
func (siw *ServerInterfaceWrapper) GetContributionDays(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContributionDaysParams

	// ------------- Required query parameter "username" -------------

	if paramValue := r.URL.Query().Get("username"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "username"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Required query parameter "access_token" -------------

	if paramValue := r.URL.Query().Get("access_token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "access_token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "access_token", r.URL.Query(), &params.AccessToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "access_token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContributionDays(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLanguageStats operation middleware
func (siw *ServerInterfaceWrapper) GetLanguageStats(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLanguageStatsParams

	// ------------- Required query parameter "username" -------------

	if paramValue := r.URL.Query().Get("username"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "username"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Required query parameter "access_token" -------------

	if paramValue := r.URL.Query().Get("access_token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "access_token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "access_token", r.URL.Query(), &params.AccessToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "access_token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLanguageStats(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiStatus operation middleware
func (siw *ServerInterfaceWrapper) GetApiStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserInfoParams

	// ------------- Required query parameter "access_token" -------------

	if paramValue := r.URL.Query().Get("access_token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "access_token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "access_token", r.URL.Query(), &params.AccessToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "access_token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/contribution-days", wrapper.GetContributionDays)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/language-stats", wrapper.GetLanguageStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.GetApiStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetUserInfo)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9KwTbo2I5bU66pemXgaIIEvQUBAEjjW0mEqkMh0YNw/99QVKyJZmWvcFm",
	"D4uc4kjDmfce38xow3Nd1VqBIsOzDTf5Eirhf95oRSifLUmtfhdr96hGXQOSBB+Qa6vI/aB1DTzjUhEs",
	"APk24YUgcG/mGitBPAsPkjbSEEq14NttwhHerEQoePbQBoW8j7to/fwCObm0A0jmDkytlYFDbIVY+7+S",
	"oPI/fkaY84z/lO75pg3ZdMh0uystEJv/NYkyztUaQCUq6Lw9wm8XmQR8bdoY1T8QNR7nl+siVjDhFRgj",
	"FmeA8Rn28TEM/wi1sGIB9ySCO4YYSo1ebDA5ytrJxzP+l6S/7TMrm8PMhzGp2BL+Z40hkkPgbXyUVSlV",
	"qDmUf0Bql6Q9kjQoT9I7LjVCrY0kjc3/Z1nqrj207ot4zFpPLfLzS5xM/C5jDtEkff4xHY9xPVDyAzju",
	"wK1Ps+zEJh0sMUqunh3xxNldNtZe/xkY6XCxEiTwyWLZG6QWZax7jtzzKRMMMLlHUs31YVPfol7JAgwz",
	"JEgakrlhIkdtDGv6vWuTiYMoqYT9OPA3yK5vZzzhK0AT0l5OppOpg6lrUKKWPOO/Ti4nU57wWtDSC5Hm",
	"nfF80Q72BfjV4xQT7sWscLWAhivCZ0JRAQEanj1suHSF3yx4GwRpug2wvz1CC0mzEaPyxXOJPAdjnki/",
	"ghrN11e4e8yNSSYsLUGRzD2/yPJ8dMmDfbwkv0ynYSwrgrCYRV2Xzfn0xbgym079r1iJ+1bwHukj78Ya",
	"hkAoYQUFM9ZTmtuy9L169Q3x9ddjBNRvomB38GbBUKh99f1q/6uJ/amtKnyPGVtVws0nZ0/WFYt5g7qY",
	"tB1HF6YdnccM3h+Jn+5+zw3GN3/kJtvA7tj7NPiowXeS3e8kCxY3fqeOWfu6lmHx8g+8+8Fqj7C7D9c6",
	"4HazhPzVLTDWYPSkXGuNUXI7fuY26lmN+kM0V++zJiKve8/cV4b7onFT8LOhRhvK6zXb6xXOG8BVayX/",
	"jchTUct0dcm3j9svAQAA///SfbmO1g8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
